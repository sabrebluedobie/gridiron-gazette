#!/usr/bin/env python3
"""
troubleshoot.py - Quick diagnostic script for Gridiron Gazette
"""

import os
import json
import sys
from pathlib import Path

def check_environment():
    """Check environment and credentials"""
    print("=== Environment Check ===")
    
    # Check Python version
    print(f"Python: {sys.version}")
    
    # Check required environment variables
    env_vars = ['ESPN_S2', 'SWID', 'OPENAI_API_KEY']
    for var in env_vars:
        value = os.getenv(var)
        if value:
            # Show first/last few characters for security
            masked = value[:4] + "..." + value[-4:] if len(value) > 8 else "***"
            print(f"‚úÖ {var}: {masked}")
        else:
            print(f"‚ùå {var}: Not set")
    
    # Check required packages
    packages = [
        ('espn_api', 'ESPN API'),
        ('openai', 'OpenAI'),
        ('docxtpl', 'Document Templates'),
        ('docx', 'Python-DOCX')
    ]
    
    print("\n=== Package Check ===")
    for package, name in packages:
        try:
            __import__(package)
            print(f"‚úÖ {name}: Installed")
        except ImportError:
            print(f"‚ùå {name}: Missing")

def check_files():
    """Check required files"""
    print("\n=== File Check ===")
    
    required_files = [
        ('leagues.json', 'League configuration'),
        ('build_gazette.py', 'Main build script'),
        ('recap_template.docx', 'Word template')
    ]
    
    for filename, description in required_files:
        path = Path(filename)
        if path.exists():
            size = path.stat().st_size
            print(f"‚úÖ {description}: {filename} ({size:,} bytes)")
        else:
            print(f"‚ùå {description}: {filename} (missing)")

def test_espn_connection():
    """Test ESPN API connection"""
    print("\n=== ESPN Connection Test ===")
    
    try:
        # Load config
        with open('leagues.json') as f:
            config = json.load(f)[0]
        
        print(f"League: {config.get('name', 'Unknown')}")
        print(f"League ID: {config.get('league_id')}")
        print(f"Year: {config.get('year')}")
        
        # Try ESPN connection
        from espn_api.football import League
        
        league = League(
            league_id=config['league_id'],
            year=config['year'],
            espn_s2=os.getenv('ESPN_S2'),
            swid=os.getenv('SWID')
        )
        
        print(f"‚úÖ Connected to: {league.settings.name}")
        print(f"Teams: {len(league.teams)}")
        
        # Test getting current week
        try:
            current_week = league.current_week
            print(f"Current week: {current_week}")
        except:
            print("Could not determine current week")
        
        # Test getting a scoreboard
        try:
            scoreboard = league.scoreboard(week=1)
            print(f"‚úÖ Week 1 scoreboard: {len(scoreboard)} games")
            
            for i, game in enumerate(scoreboard[:3], 1):
                home = game.home_team.team_name
                away = game.away_team.team_name
                print(f"  Game {i}: {home} vs {away}")
                
        except Exception as e:
            print(f"‚ùå Error getting scoreboard: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ESPN connection failed: {e}")
        return False

def check_logo_system():
    """Check logo discovery system"""
    print("\n=== Logo System Check ===")
    
    # Check logo directories
    logo_dirs = [
        'logos',
        'logos/generated_logos',
        'logos/ai',
        'assets/logos'
    ]
    
    total_logos = 0
    for logo_dir in logo_dirs:
        path = Path(logo_dir)
        if path.exists():
            files = list(path.glob('*.*'))
            total_logos += len(files)
            print(f"‚úÖ {logo_dir}: {len(files)} files")
        else:
            print(f"‚ùå {logo_dir}: Directory not found")
    
    # Check team_logos.json
    mapping_file = Path('team_logos.json')
    if mapping_file.exists():
        try:
            with open(mapping_file) as f:
                mapping = json.load(f)
            print(f"‚úÖ team_logos.json: {len(mapping)} team mappings")
            
            # Show first few mappings
            for i, (team, path) in enumerate(list(mapping.items())[:3]):
                exists = "‚úÖ" if Path(path).exists() else "‚ùå"
                print(f"   {exists} {team}: {path}")
            
        except Exception as e:
            print(f"‚ùå team_logos.json: Error reading - {e}")
    else:
        print("‚ùå team_logos.json: File not found")
    
    print(f"Total logo files found: {total_logos}")

def test_template():
    """Test template loading"""
    print("\n=== Template Test ===")
    
    template_file = Path('recap_template.docx')
    if not template_file.exists():
        print("‚ùå recap_template.docx not found")
        return False
    
    try:
        from docxtpl import DocxTemplate
        
        doc = DocxTemplate(str(template_file))
        print("‚úÖ Template loaded successfully")
        
        # Try to get template variables
        try:
            # Test with minimal context
            test_context = {
                'WEEK_NUMBER': 1,
                'title': 'Test',
                'MATCHUP1_HOME': 'Team A',
                'MATCHUP1_AWAY': 'Team B'
            }
            
            undeclared = doc.get_undeclared_template_variables(test_context)
            if undeclared:
                print(f"Template variables found: {len(undeclared)}")
                print(f"First 10: {sorted(list(undeclared))[:10]}")
            else:
                print("‚úÖ Template variables all satisfied by test context")
                
        except Exception as e:
            print(f"Could not analyze template variables: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error loading template: {e}")
        return False

def create_minimal_test():
    """Create a minimal test that should work"""
    print("\n=== Creating Minimal Test ===")
    
    try:
        # Create minimal team logos
        logos_dir = Path('logos/generated_logos')
        logos_dir.mkdir(parents=True, exist_ok=True)
        
        test_teams = ['Storm', 'Eagles', 'Panthers', 'Hawks']
        team_logos = {}
        
        for team in test_teams:
            logo_file = logos_dir / f'{team}.txt'
            logo_file.write_text(f'Test logo for {team}')
            team_logos[team] = str(logo_file)
        
        # Save mapping
        with open('team_logos.json', 'w') as f:
            json.dump(team_logos, f, indent=2)
        
        print(f"‚úÖ Created {len(test_teams)} test logos")
        
        # Test the build command that should work
        print("\nRecommended test command:")
        print("python build_gazette.py \\")
        print("  --template recap_template.docx \\")
        print("  --out-docx test_gazette.docx \\")
        print("  --league-id 887998 \\")
        print("  --year 2025 \\")
        print("  --week 1 \\")
        print("  --slots 6")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating test setup: {e}")
        return False

def main():
    """Run all diagnostics"""
    print("üîç Gridiron Gazette Troubleshooter\n")
    
    check_environment()
    check_files()
    
    espn_ok = test_espn_connection()
    check_logo_system()
    template_ok = test_template()
    
    if espn_ok and template_ok:
        create_minimal_test()
    
    print("\n=== Summary ===")
    print("If you see ‚ùå errors above, fix those first.")
    print("If everything shows ‚úÖ, try running the recommended test command.")
    print("\nFor GitHub Actions, make sure:")
    print("1. ESPN_S2 and SWID are set as repository secrets")
    print("2. OPENAI_API_KEY is set as a repository secret") 
    print("3. recap_template.docx is committed to the repository")
    print("4. The workflow creates the output directory before building")

if __name__ == "__main__":
    main()