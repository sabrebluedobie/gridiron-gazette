name: Build & Publish Gazette (Pages)

on:
  schedule:
    # 9:05 AM America/Chicago = 14:05 UTC Tuesdays
    - cron: '5 14 * * TUE'
  workflow_dispatch: {}

permissions:
  pages: write
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: America/Chicago
    steps:
      - uses: actions/checkout@v4

      # System deps: LibreOffice (PDF/A), Poppler (flatten), fonts cache
      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice libreoffice-writer poppler-utils
          python -m pip install --upgrade pip wheel
          python -m pip install img2pdf

          # Install your repo fonts if you have a /fonts directory
          if [ -d fonts ]; then
            mkdir -p ~/.fonts && cp -r fonts/* ~/.fonts/ || true
            fc-cache -f -v
          fi

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Project deps
        run: |
          pip install -r requirements.txt

      # Build DOCX using your existing builder(s)
      - name: Build DOCX for all leagues
        env:
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          ESPN_SWID: ${{ secrets.ESPN_SWID }}
        run: |
          # adjust to your script; these already exist in your repo
          python build_gazette.py --season auto --week auto --out recaps_out/

      # Convert DOCX -> PDF/A (fonts embedded) -> flatten to image-only PDF (non-editable)
      - name: Export and flatten PDFs
        run: |
          set -e
          mkdir -p public/gazettes
          python - <<'PY'
from pathlib import Path
import subprocess, shlex, json, os

def lo_export(docx_path, outdir):
    export = 'pdf:writer_pdf_Export:{"SelectPdfVersion":{"type":"long","value":"1"},"UseTaggedPDF":{"type":"boolean","value":"true"},"EmbedStandardFonts":{"type":"boolean","value":"true"}}'
    cmd = f'soffice --headless --convert-to {shlex.quote(export)} --outdir {shlex.quote(outdir)} {shlex.quote(str(docx_path))}'
    subprocess.check_call(cmd, shell=True)

def flatten(pdf_src, pdf_dst, dpi=200):
    tmp = Path("frames"); 
    if tmp.exists():
        for p in tmp.glob("*"): p.unlink()
    else:
        tmp.mkdir()
    base = tmp/"page"
    # 1) PDF->PNG
    subprocess.check_call(f'pdftoppm -png -r {dpi} {shlex.quote(str(pdf_src))} {shlex.quote(str(base))}', shell=True)
    # 2) PNGs->PDF
    imgs = sorted(str(p) for p in tmp.glob("page*.png"))
    subprocess.check_call("img2pdf " + " ".join(shlex.quote(i) for i in imgs) + f" -o {shlex.quote(str(pdf_dst))}", shell=True)
    for p in tmp.glob("*"): p.unlink(); tmp.rmdir()

src = Path("recaps_out")
pdfa_out = Path("out_pdf"); pdfa_out.mkdir(exist_ok=True)
final_out = Path("public/gazettes"); final_out.mkdir(parents=True, exist_ok=True)

files = []
for docx in src.glob("**/*.docx"):
    lo_export(docx, str(pdfa_out))
    pdf = pdfa_out / (docx.stem + ".pdf")
    # Pick league slug from filename; adjust if you have a different naming pattern
    slug = docx.stem.lower().replace(" ", "-")
    dst = final_out / f"{slug}.pdf"
    flatten(pdf, dst, dpi=200)
    files.append({"slug": slug, "file": dst.name})

# Write an index for your front-end or Zap
(Path("public")/"gazettes.json").write_text(json.dumps({"files": files}, indent=2), encoding="utf-8")
PY

      - name: Build "latest" redirects per league (optional)
        run: |
          # Simple meta-refresh pages at /gazettes/<slug>/latest that point to the current file
          python - <<'PY'
from pathlib import Path
import json
pub = Path("public")
idx = json.loads((pub/"gazettes.json").read_text(encoding="utf-8"))
for item in idx["files"]:
    slug = item["slug"]; fname = item["file"]
    d = pub/"gazettes"/slug; d.mkdir(parents=True, exist_ok=True)
    (d/"latest.html").write_text(f'<meta http-equiv="refresh" content="0; url=/gazettes/{fname}">', encoding="utf-8")
PY

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
      - name: Ping Zapier with index
        env:
          ZAPIER_HOOK: ${{ secrets.ZAPIER_HOOK }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            --data @public/gazettes.json \
            "$ZAPIER_HOOK"
