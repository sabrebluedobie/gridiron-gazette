name: Build Gridiron Gazette

on:
  workflow_dispatch:
    inputs:
      week:
        description: "Week number (leave blank to use 0/auto)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    # Map GitHub Secrets/Variables into the job's environment
    env:
      # Secrets
      ESPN_S2: ${{ secrets.ESPN_S2 }}
      SWID: ${{ secrets.SWID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # Repo-level Variables (Settings → Actions → Variables)
      LEAGUE_ID: ${{ vars.LEAGUE_ID || '887998' }}
      YEAR: ${{ vars.YEAR || '2025' }}
      TEMPLATE: ${{ vars.TEMPLATE || 'recap_template.docx' }}
      OUTDOCX: ${{ vars.OUTDOCX || 'recaps/Week{week}_Gazette.docx' }}
      TEAM_LOGOS_FILE: ${{ vars.TEAM_LOGOS_FILE || 'team-logos.json' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight (print what the app will see)
        run: |
          python - <<'PY'
          import os, pathlib, yaml
          p = pathlib.Path('gazette.yml')
          cfg = yaml.safe_load(p.read_text()) if p.exists() else {}
          def present(v): return "present" if v and str(v).strip() else "missing"
          print("YAML present:", p.exists())
          print("LEAGUE_ID:", os.environ.get('LEAGUE_ID'))
          print("YEAR:", os.environ.get('YEAR'))
          print("TEMPLATE:", os.environ.get('TEMPLATE'))
          print("OUTDOCX:", os.environ.get('OUTDOCX'))
          print("TEAM_LOGOS_FILE:", os.environ.get('TEAM_LOGOS_FILE'))
          print("ESPN_S2:", present(os.environ.get('ESPN_S2')))
          print("SWID:", present(os.environ.get('SWID')))
          print("OPENAI_API_KEY:", present(os.environ.get('OPENAI_API_KEY')))
          PY

      - name: Build Gazette (Sabre voice on by default)
        run: |
          set -euo pipefail

          # Pull optional input week; default to 0 (auto/week from YAML)
          WEEK_INPUT="${{ inputs.week || '' }}"
          PY_ARGS=()
          if [ -n "$WEEK_INPUT" ]; then
            PY_ARGS+=(--week "$WEEK_INPUT")
          fi

          # Run — cookies can be ESPN_S2/SWID (we set env above)
          python build_gazette.py \
            --league "${LEAGUE_ID}" \
            --year "${YEAR}" \
            --template "${TEMPLATE}" \
            --outdocx "${OUTDOCX}" \
            --llm-blurbs \
            --blurb-style sabre \
            --verbose \
            "${PY_ARGS[@]}"

      - name: Upload recap
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: recap-docs
          path: |
            recaps/*.docx
            recaps/*.pdf
