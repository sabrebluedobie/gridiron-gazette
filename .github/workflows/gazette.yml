name: Build Gazette

on:
  workflow_dispatch:
    inputs:
      week:
        description: 'Week number'
        required: false
        default: '1'
        type: string

jobs:
  build-gazette:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip "setuptools<81" wheel
          pip install -r requirements.txt

      - name: Debug environment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          SWID: ${{ secrets.SWID }}
        run: |
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Files in repo:"
          ls -la
          echo "ESPN_S2 set: $([[ -n "$ESPN_S2" ]] && echo 'yes' || echo 'no')"
          echo "SWID set: $([[ -n "$SWID" ]] && echo 'yes' || echo 'no')"
          echo "OPENAI_API_KEY set: $([[ -n "$OPENAI_API_KEY" ]] && echo 'yes' || echo 'no')"

      - name: Create output directories
        run: |
          mkdir -p recaps
          mkdir -p artifacts
          echo "Created directories:"
          ls -la recaps/ artifacts/

      - name: Generate basic team logos for testing
        run: |
          mkdir -p logos/generated_logos
          python3 -c "
          import json
          from pathlib import Path
          import re
          
          # Create basic placeholder logos
          logos_dir = Path('logos/generated_logos')
          team_logos = {}
          
          # Sample team names for testing
          teams = ['Storm', 'Wafflers', 'Eagles', 'Panthers', 'Hawks', 'Thunder', 'Rebels', 'Titans']
          
          for team in teams:
              safe_name = re.sub(r'[^a-zA-Z0-9_-]', '_', team)
              logo_file = logos_dir / f'{safe_name}.txt'
              logo_file.write_text(f'Logo placeholder for {team}')
              team_logos[team] = str(logo_file)
          
          # Save the mapping
          with open('team_logos.json', 'w') as f:
              json.dump(team_logos, f, indent=2)
          
          print(f'Created {len(team_logos)} placeholder logos')
          "

      - name: Test ESPN connection
        env:
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          SWID: ${{ secrets.SWID }}
        run: |
          python3 -c "
          import os
          import json
          from pathlib import Path
          
          try:
              from espn_api.football import League
              
              with open('leagues.json') as f:
                  config = json.load(f)[0]
              
              league = League(
                  league_id=config['league_id'],
                  year=config['year'],
                  espn_s2=os.getenv('ESPN_S2'),
                  swid=os.getenv('SWID')
              )
              
              print(f'✅ Connected to: {league.settings.name}')
              print(f'Teams: {len(league.teams)}')
              
              # Test getting week data
              try:
                  week = int('${{ github.event.inputs.week }}' or '1')
                  scoreboard = league.scoreboard(week=week)
                  print(f'✅ Found {len(scoreboard)} games for week {week}')
              except Exception as e:
                  print(f'⚠️  Could not get week data: {e}')
              
          except Exception as e:
              print(f'❌ ESPN connection failed: {e}')
              raise
          "

      - name: Build gazette
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          SWID: ${{ secrets.SWID }}
        run: |
          # Set the week number
          WEEK_NUM="${{ github.event.inputs.week }}"
          if [ -z "$WEEK_NUM" ]; then
            WEEK_NUM="1"
          fi
          
          # Define output paths
          OUTPUT_DIR="recaps"
          OUTPUT_FILE="$OUTPUT_DIR/gazette_week_${WEEK_NUM}.docx"
          ARTIFACT_FILE="artifacts/gazette_week_${WEEK_NUM}.docx"
          
          echo "Building gazette for week $WEEK_NUM"
          echo "Output file: $OUTPUT_FILE"
          
          # Run the build
          python build_gazette.py \
            --template "${{ vars.TEMPLATE || 'recap_template.docx' }}" \
            --out-docx "$OUTPUT_FILE" \
            --league-id "${{ vars.LEAGUE_ID || '887998' }}" \
            --year "${{ vars.YEAR || '2025' }}" \
            --week "$WEEK_NUM" \
            --llm-blurbs \
            --blurb-style mascot \
            --blurb-words 500 \
            --temperature 0.4 \
            --slots 10
          
          # Check if file was created
          if [ -f "$OUTPUT_FILE" ]; then
            echo "✅ Gazette created successfully: $OUTPUT_FILE"
            ls -la "$OUTPUT_FILE"
            
            # Copy to artifacts directory for upload
            cp "$OUTPUT_FILE" "$ARTIFACT_FILE"
            echo "✅ Copied to artifacts: $ARTIFACT_FILE"
          else
            echo "❌ Gazette file was not created!"
            echo "Contents of output directory:"
            ls -la "$OUTPUT_DIR/" || echo "Output directory does not exist"
            exit 1
          fi

      - name: List all created files
        run: |
          echo "=== All files in workspace ==="
          find . -name "*.docx" -o -name "*.pdf" | head -20
          echo ""
          echo "=== Contents of recaps/ ==="
          ls -la recaps/ || echo "recaps/ directory not found"
          echo ""
          echo "=== Contents of artifacts/ ==="
          ls -la artifacts/ || echo "artifacts/ directory not found"

      - name: Upload gazette as artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: gazette-week-${{ github.event.inputs.week || '1' }}
          path: |
            recaps/*.docx
            artifacts/*.docx
          retention-days: 30

      - name: Upload additional files as artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: gazette-extras-week-${{ github.event.inputs.week || '1' }}
          path: |
            team_logos.json
            logos/generated_logos/*
          retention-days: 7
          if-no-files-found: ignore