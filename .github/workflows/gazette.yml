name: Build Gridiron Gazette

on:
  workflow_dispatch:
    inputs:
      week:
        description: "Override week (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install espn-api docxtpl python-docx python-dotenv pyyaml openai requests

      # Export all secrets/vars to the job environment (no linter warnings)
      - name: Export repo Secrets & Variables to $GITHUB_ENV
        run: |
          {
            echo "ESPN_S2=${{ secrets.ESPN_S2 }}"
            echo "SWID=${{ secrets.SWID }}"
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
            echo "LEAGUE_ID=${{ vars.LEAGUE_ID }}"
            echo "YEAR=${{ vars.YEAR }}"
            echo "TEMPLATE=${{ vars.TEMPLATE }}"
            echo "OUTDOCX=${{ vars.OUTDOCX }}"
            echo "FANTASY_SEASON_START=${{ vars.FANTASY_SEASON_START }}"
          } >> "$GITHUB_ENV"

      - name: Preflight (sanity print, no secrets)
        run: |
          python - <<'PY'
          import os, yaml, pathlib
          p = pathlib.Path('gazette.yml')
          cfg = yaml.safe_load(p.read_text()) if p.exists() else {}
          def safe(v): return f"present(len={len(v)})" if v else "missing"
          print("YAML present:", p.exists())
          for k in ['league_id','year','week','template','output_dir','blurb_style','blurb_words','llm_blurbs']:
              print(f"{k}: {cfg.get(k)}")
          print("ESPN_S2:", safe(os.environ.get('ESPN_S2')))
          print("SWID:", safe(os.environ.get('SWID')))
          print("OPENAI_API_KEY:", safe(os.environ.get('OPENAI_API_KEY')))
          print("LEAGUE_ID:", os.environ.get('LEAGUE_ID'))
          print("YEAR:", os.environ.get('YEAR'))
          print("TEMPLATE:", os.environ.get('TEMPLATE'))
          print("OUTDOCX:", os.environ.get('OUTDOCX'))
          print("FANTASY_SEASON_START:", os.environ.get('FANTASY_SEASON_START'))
          PY

      - name: Run Gazette build
        run: |
          set -euo pipefail

          # Safe defaults in shell
          : "${TEMPLATE:=recap_template.docx}"
          : "${OUTDOCX:=recaps}"
          : "${YEAR:=2025}"

          PY_ARGS=()
          if [ -n "${{ github.event.inputs.week }}" ]; then
            PY_ARGS+=(--week "${{ github.event.inputs.week }}")
          fi

          if [ -z "${LEAGUE_ID:-}" ]; then
            echo "❌ LEAGUE_ID is not set (Settings → Actions → Variables)."
            exit 1
          fi

          python build_gazette.py --llm-blurbs --verbose "${PY_ARGS[@]}"

      - name: Upload Gazette artifact
        uses: actions/upload-artifact@v4
        with:
          name: gazette
          path: |
            recaps/*.docx
            recaps/*.pdf
          if-no-files-found: warn
