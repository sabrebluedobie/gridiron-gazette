name: Gazette Builder

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode: single or multi"
        required: true
        default: "single"
        type: choice
        options: ["single", "multi"]
      week:
        description: "Explicit week (optional)"
        required: false
        type: string
      year:
        description: "Year (e.g., 2025)"
        required: true
        type: string
      auto_week:
        description: "Use auto-week?"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]
      llm_blurbs:
        description: "Generate LLM blurbs?"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]
      blurb_style:
        description: "Blurb style (sabre/mascot/default)"
        required: false
        default: "sabre"
        type: choice
        options: ["sabre", "mascot", "default"]
      environment:
        description: "Environment to use (for secrets)"
        required: false
        default: "production"
        type: string
  schedule:
    - cron: "0 15 * * 2"   # Tuesdays 15:00 UTC (~9am CST, 10am CDT)

jobs:
  build:
    runs-on: ubuntu-latest
    # üëá THIS IS THE KEY LINE - specifies which environment to use
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v4

      # 1) System tools for PDF/PDF-A
      - name: Install PDF tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice ghostscript

      # 2) Python setup
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml  # for multi-league support

      # 3) Create output directory
      - name: Create output directory
        run: |
          mkdir -p recaps
          echo "‚úÖ Created recaps directory"

      # 4) Validate environment
      - name: Validate setup
        env:
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          SWID: ${{ secrets.SWID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "=== Environment Check ==="
          echo "Using environment: ${{ github.event.inputs.environment || 'production' }}"
          echo ""
          
          echo "=== Checking required files ==="
          ls -la recap_template.docx || echo "‚ö†Ô∏è  Template missing"
          ls -la leagues.json || echo "‚ö†Ô∏è  leagues.json missing"
          ls -la team_logos.json || echo "‚ö†Ô∏è  team_logos.json missing"
          
          echo ""
          echo "=== Checking secrets from environment ==="
          if [ -z "$ESPN_S2" ]; then 
            echo "‚ùå ESPN_S2 not set in environment '${{ github.event.inputs.environment || 'production' }}'"
            exit 1
          else
            echo "‚úÖ ESPN_S2 is set (${#ESPN_S2} chars)"
          fi
          
          if [ -z "$SWID" ]; then 
            echo "‚ùå SWID not set in environment '${{ github.event.inputs.environment || 'production' }}'"
            exit 1
          else
            echo "‚úÖ SWID is set"
          fi
          
          if [ -z "$OPENAI_API_KEY" ]; then 
            echo "‚ö†Ô∏è  OPENAI_API_KEY not set - LLM blurbs will be disabled"
          else
            echo "‚úÖ OPENAI_API_KEY is set"
          fi
          
          echo ""
          echo "=== Checking Python modules ==="
          python -c "import espn_api; print('‚úÖ espn_api')" || echo "‚ùå espn_api missing"
          python -c "import openai; print('‚úÖ openai')" || echo "‚ùå openai missing"
          python -c "import docxtpl; print('‚úÖ docxtpl')" || echo "‚ùå docxtpl missing"
          
          echo ""
          echo "‚úÖ Validation complete"

      # 5) Run Gazette Builder
      - name: Build Gazette
        env:
          # These come from the GitHub Environment specified above
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          SWID: ${{ secrets.SWID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LEAGUE_ID: ${{ secrets.LEAGUE_ID }}
          YEAR: ${{ github.event.inputs.year || '2025' }}
          WEEK: ${{ github.event.inputs.week }}
        run: |
          set -e
          
          # Parse inputs with defaults
          MODE="${{ github.event.inputs.mode }}"
          AUTO="${{ github.event.inputs.auto_week }}"
          LLM="${{ github.event.inputs.llm_blurbs }}"
          BLURB_STYLE="${{ github.event.inputs.blurb_style }}"
          WEEK_IN="${{ github.event.inputs.week }}"
          
          # Set defaults for scheduled runs
          if [ -z "$MODE" ]; then MODE="single"; fi
          if [ -z "$AUTO" ]; then AUTO="true"; fi
          if [ -z "$LLM" ]; then LLM="true"; fi
          if [ -z "$BLURB_STYLE" ]; then BLURB_STYLE="sabre"; fi
          
          echo "=== Build Configuration ==="
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Mode: $MODE"
          echo "Auto-week: $AUTO"
          echo "LLM Blurbs: $LLM"
          echo "Blurb Style: $BLURB_STYLE"
          echo "Year: $YEAR"
          echo "Week: ${WEEK_IN:-auto}"
          echo "Output: ./recaps/"
          echo ""
          
          if [ "$MODE" = "single" ]; then
            # Single league mode - use build_gazette.py directly
            echo "üèà Building single league gazette..."
            
            if [ -z "$WEEK_IN" ]; then
              if [ "$AUTO" = "true" ]; then
                echo "Using auto-week detection"
                python build_gazette.py \
                  --league-id "$LEAGUE_ID" \
                  --year "$YEAR" \
                  --auto-week \
                  $([ "$LLM" = "true" ] && echo "--llm-blurbs --blurb-style $BLURB_STYLE") \
                  --output-dir ./recaps \
                  --verbose
              else
                echo "Error: AUTO=false but no WEEK specified"
                exit 1
              fi
            else
              echo "Using explicit week: $WEEK_IN"
              python build_gazette.py \
                --league-id "$LEAGUE_ID" \
                --year "$YEAR" \
                --week "$WEEK_IN" \
                $([ "$LLM" = "true" ] && echo "--llm-blurbs --blurb-style $BLURB_STYLE") \
                --output-dir ./recaps \
                --verbose
            fi
            
          else
            # Multi-league mode - use weekly_recap_multi.py
            echo "üèà Building multi-league gazettes..."
            
            if [ -z "$WEEK_IN" ]; then
              if [ "$AUTO" = "true" ]; then
                python weekly_recap_multi.py \
                  --config leagues.yml \
                  --auto-week \
                  $([ "$LLM" = "true" ] && echo "--llm-blurbs --blurb-style $BLURB_STYLE") \
                  --output-dir ./recaps \
                  --verbose
              else
                echo "Error: AUTO=false but no WEEK specified"
                exit 1
              fi
            else
              python weekly_recap_multi.py \
                --config leagues.yml \
                --week "$WEEK_IN" \
                $([ "$LLM" = "true" ] && echo "--llm-blurbs --blurb-style $BLURB_STYLE") \
                --output-dir ./recaps \
                --verbose
            fi
          fi
          
          echo ""
          echo "‚úÖ Build complete"

      # 6) Verify outputs
      - name: Verify outputs
        run: |
          echo "=== Generated Files ==="
          
          # Check if directory exists
          if [ ! -d "recaps" ]; then
            echo "‚ùå Output directory 'recaps' does not exist!"
            exit 1
          fi
          
          # List all files
          if [ -n "$(find recaps -type f 2>/dev/null)" ]; then
            find recaps -type f -name "*.docx" -o -name "*.pdf" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  üìÑ $file ($size)"
            done
          else
            echo "  (no files found)"
          fi
          
          # Count files
          DOCX_COUNT=$(find recaps -name "*.docx" 2>/dev/null | wc -l)
          PDF_COUNT=$(find recaps -name "*.pdf" 2>/dev/null | wc -l)
          
          echo ""
          echo "Summary: $DOCX_COUNT DOCX, $PDF_COUNT PDF files created"
          
          if [ $DOCX_COUNT -eq 0 ]; then
            echo "‚ùå No DOCX files created!"
            echo ""
            echo "Debugging info:"
            echo "Directory structure:"
            ls -laR recaps/ || echo "Cannot list recaps/"
            echo ""
            echo "Python script exit status: check previous step"
            exit 1
          fi
          
          echo "‚úÖ Output verification passed"

      # 7) Upload artifacts
      - name: Upload gazette artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: gazette-week-${{ github.event.inputs.week || 'auto' }}
          path: |
            recaps/**/*.docx
            recaps/**/*.pdf
          retention-days: 90
          if-no-files-found: warn

      # 8) Upload artifacts even on failure for debugging
      - name: Upload debug artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            recaps/
            *.log
          retention-days: 7
          if-no-files-found: ignore

      # 9) Optional: Create release (if tagged)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            recaps/**/*.docx
            recaps/**/*.pdf
          generate_release_notes: true